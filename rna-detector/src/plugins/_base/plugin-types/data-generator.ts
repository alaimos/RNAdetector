import { Data, Dataset } from "@prisma/client";
import { Job } from "bullmq";
import { CustomParameterType } from "@/plugins/_base/plugin-types/custom-parameters";
import { CustomWizardStep } from "@/plugins/_base/plugin-types/custom-gui";
import { Path } from "react-hook-form";

/**
 * A function that generates data based on the source data, destination dataset, and parameters.
 * The function should return a promise that resolves with an array of data objects.
 * The function will receive four arguments: the source data object, the destination dataset object,
 * the parameter object, and the job object from the queue.
 * The function MUST not modify the source data.
 * The function can modify the destination dataset object directly.
 * The function will modify the data on the database.
 * @param sourceData The source data object.
 * @param destinationDataset The destination dataset object.
 * @param parameters The parameters object.
 * @param job The job object from the queue.
 * @returns An array of data objects generated by the function.
 */
export type DataGeneratorFunction<Parameters = Record<string, any>> = (
  sourceData: Data,
  destinationDataset: Dataset,
  parameters: Parameters,
  job: Job,
) => Promise<Data[]>;

/**
 * A data generator is a feature of RNAdetector 2 that generates new datasets based on existing data.
 * This feature should be used for simple data transformations that do not require complex workflows.
 * For example, a data generator could take an input genome in FASTA format and generate indices for some alignment tools.
 * The data generator should be able to run in a reasonable amount of time and should not require complex dependencies.
 */
export interface DataGenerator<
  Parameters extends Record<string, any> = Record<string, any>,
> {
  /**
   * The source data type of the generator.
   */
  fromType: string;
  /**
   * The type of data generated by the generator.
   */
  toType: string;
  /**
   * The name of the generator. It will be displayed in the UI.
   */
  name: string;
  /**
   * A description of the generator. It will be displayed in the UI.
   */
  description: string;
  /**
   * The parameters required by the generator.
   * If not provided, no parameters will be required.
   * See the CustomParameter interface for more details.
   */
  parameters?: Record<Path<Parameters>, CustomParameterType<Parameters>>;
  /**
   * The wizard steps used to collect the parameters.
   * If not provided, all parameters will be displayed in a single form.
   * See the CustomWizardStep interface for more details.
   */
  wizardSteps?: CustomWizardStep<Parameters>[];
  /**
   * A function that generates data based on the source data, destination dataset, and parameters.
   * The function should return a promise that resolves with an array of data objects.
   * The function will receive four arguments: the source data object, the destination dataset object,
   * the parameter object, and the job object from the queue.
   * The function MUST not modify the source data.
   * The function can modify the destination dataset object directly.
   * The function will modify the data on the database.
   *
   * @param sourceData The source data object.
   * @param destinationDataset The destination dataset object.
   * @param parameters The parameters object.
   * @param job The job object from the queue.
   * @returns An array of data objects generated by the function.
   */
  generate: DataGeneratorFunction<Parameters>;
}
