<?php

namespace App\Services\Snakemake\Workflow\ConfigGenerators;

use App\Services\Snakemake\Workflow\Contracts\MetadataContainer;
use App\Services\Snakemake\Workflow\Data\CollectedDataFiles;
use App\Services\Snakemake\Workflow\WorkflowDatasets;
use Closure;
use Illuminate\Contracts\Config\Repository as ConfigContract;
use Illuminate\Support\Facades\File;
use InvalidArgumentException;
use Override;
use ArrayAccess;

class JsonConfigGenerator extends AbstractConfigGenerator
{

    /**
     * The name of the file generated by this config generator.
     */
    public protected(set) string $file;

    /**
     * The default values used for the configuration.
     * @var array<string, mixed>
     */
    public protected(set) array $defaultConfig;

    /**
     * A callback to prepare the configuration before it is written to a file.
     * The callback should accept the configuration parameters, data files, datasets, metadata, and default configuration.
     * It should return an array that represents the configuration that will be written to the file as JSON.
     *
     * @var Closure(ArrayAccess<string, mixed>&ConfigContract, CollectedDataFiles, WorkflowDatasets, MetadataContainer, array<string, mixed>): array<string, mixed>
     */
    public Closure $prepareConfigCallback;

    /**
     * @param  string  $file
     * @param  array<string, mixed>  $defaultConfig
     * @param  Closure(ArrayAccess<string, mixed>&ConfigContract, CollectedDataFiles, WorkflowDatasets, MetadataContainer, array<string, mixed>): array<string, mixed>  $prepareConfigCallback
     */
    public function __construct(string $file, array $defaultConfig, Closure $prepareConfigCallback)
    {
        $this->file = $file;
        $this->defaultConfig = $defaultConfig;
        $this->prepareConfigCallback = $prepareConfigCallback;
    }

    /**
     * Convert an array to a Config Generator instance.
     *
     * @param  array<string, mixed>  $data
     */
    #[Override]
    public static function from(array $data): static
    {
        if (!isset($data['file'], $data['prepareConfigCallback'])) {
            throw new InvalidArgumentException('The data array must contain the file and prepareConfigCallback keys.');
        }

        return new static( // @phpstan-ignore-line
            file: $data['file'],
            defaultConfig: $data['defaultConfig'] ?? [],
            prepareConfigCallback: $data['prepareConfigCallback']
        );
    }

    /**
     * Get the name of the file generated by this config generator.
     * The name should also include the path relative to the workflow directory.
     */
    #[Override]
    public function file(): string
    {
        return $this->file;
    }

    /**
     * Write the configuration to a file in the given directory.
     * @throws \JsonException
     */
    #[Override]
    public function write(string $workflowDir): void
    {
        $config = ($this->prepareConfigCallback)(
            $this->params,
            $this->dataFiles,
            $this->datasets,
            $this->metadata,
            $this->defaultConfig
        );

        $configPath = $workflowDir . '/' . $this->file;
        File::ensureDirectoryExists(dirname($configPath));
        File::put(
            path:     $configPath,
            contents: json_encode($config, JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT)
        );
    }
}
