<?php

namespace App\Services\Snakemake\Workflow\ConfigGenerators;

use App\Services\Snakemake\Workflow\Contracts\MetadataContainer;
use App\Services\Snakemake\Workflow\Data\CollectedDataFiles;
use App\Services\Snakemake\Workflow\WorkflowDatasets;
use Closure;
use Illuminate\Contracts\Config\Repository as ConfigContract;
use Illuminate\Support\Facades\File;
use InvalidArgumentException;
use Override;
use ArrayAccess;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Csv;

class CsvConfigGenerator extends AbstractConfigGenerator
{

    /**
     * The name of the file generated by this config generator.
     */
    public protected(set) string $file;

    /**
     * The separator used in the CSV file.
     * The default is a comma.
     */
    public protected(set) string $separator = ",";

    /**
     * The enclosure used in the CSV file fields.
     * The default is a double quote.
     */
    public protected(set) string $enclosure = '"';

    /**
     * The line ending used in the CSV file.
     * The default is the PHP_EOL constant.
     */
    public protected(set) string $lineEnding = PHP_EOL;

    /**
     * Whether the enclosure is always required for fields
     * or only when the field contains the separator or enclosure.
     * The default is false.
     */
    public protected(set) bool $alwaysEnclose = false;

    /**
     * A callback to prepare the configuration before it is written to a file.
     * The callback should accept the configuration parameters, data files, datasets, and metadata.
     * It should return an 2-dimensional array where each element is a row in the CSV file.
     * The first row should contain the column headers only when required.
     *
     * @var Closure(ArrayAccess<string, mixed>&ConfigContract, CollectedDataFiles, WorkflowDatasets, MetadataContainer): (string[][])
     */
    public Closure $prepareConfigCallback;

    /**
     * @param  string  $file
     * @param  Closure(ArrayAccess<string, mixed>&ConfigContract, CollectedDataFiles, WorkflowDatasets, MetadataContainer): (string[][])  $prepareConfigCallback
     */
    public function __construct(string $file, Closure $prepareConfigCallback)
    {
        $this->file = $file;
        $this->prepareConfigCallback = $prepareConfigCallback;
    }

    /**
     * Convert an array to a Config Generator instance.
     *
     * @param  array<string, mixed>  $data
     */
    #[Override]
    public static function from(array $data): static
    {
        if (!isset($data['file'], $data['prepareConfigCallback'])) {
            throw new InvalidArgumentException('The data array must contain the file and prepareConfigCallback keys.');
        }

        $configGenerator = new static( // @phpstan-ignore-line
            file:                  $data['file'],
            prepareConfigCallback: $data['prepareConfigCallback']
        );
        if (isset($data['separator'])) {
            $configGenerator->separator = $data['separator'];
        }
        if (isset($data['enclosure'])) {
            $configGenerator->enclosure = $data['enclosure'];
        }
        if (isset($data['lineEnding'])) {
            $configGenerator->lineEnding = $data['lineEnding'];
        }
        if (isset($data['alwaysEnclose'])) {
            $configGenerator->alwaysEnclose = $data['alwaysEnclose'];
        }
        return $configGenerator;
    }

    /**
     * Get the name of the file generated by this config generator.
     * The name should also include the path relative to the workflow directory.
     */
    #[Override]
    public function file(): string
    {
        return $this->file;
    }

    /**
     * Write the configuration to a file in the given directory.
     */
    #[Override]
    public function write(string $workflowDir): void
    {
        $config = ($this->prepareConfigCallback)(
            $this->params,
            $this->dataFiles,
            $this->datasets,
            $this->metadata,
        );

        $spreadsheet = new Spreadsheet();
        $activeSheet = $spreadsheet->getActiveSheet();
        $activeSheet->fromArray($config);
        $writer = new Csv($spreadsheet);
        $writer->setDelimiter($this->separator);
        $writer->setEnclosure($this->enclosure);
        $writer->setLineEnding($this->lineEnding);
        $writer->setEnclosureRequired($this->alwaysEnclose);
        $writer->setSheetIndex($spreadsheet->getActiveSheetIndex());
        $configPath = $workflowDir . '/' . $this->file;
        $writer->save($configPath);
    }
}
