datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  sessions      Session[]
  account       Account?
  datasets      Dataset[]
  data          Data[]
  analyses      Analysis[]
  notifications Notification[]

  @@map("users")
}

model Account {
  id                       String   @id @default(uuid())
  userId                   String   @unique @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Tags {
  id   String @id @default(uuid())
  name String @unique

  datasets   TagsOnDataset[]
  TagsOnData TagsOnData[]

  @@map("tags")
}

model Dataset {
  id           String   @id @default(uuid())
  name         String
  description  String?
  public       Boolean  @default(false)
  metadataFile String?  @map("metadata_file")
  createdBy    String?  @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  data Data[]
  user User?           @relation(fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  tags TagsOnDataset[]

  @@map("datasets")
}

model TagsOnDataset {
  datasetId String @map("dataset_id")
  tagId     String @map("tag_id")

  dataset Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag     Tags    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([datasetId, tagId])
  @@map("dataset_tags")
}

model Data {
  id        String    @id @default(uuid())
  name      String
  type      String
  public    Boolean   @default(false)
  queueId   String?   @map("queue_id")
  status    JobStatus @default(PENDING)
  datasetId String    @map("dataset_id")
  content   Json?     @default("{}")
  createdBy String?   @map("created_by")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  dataset  Dataset      @relation(fields: [datasetId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user     User?        @relation(fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dataType DataType     @relation(fields: [type], references: [id])
  tags     TagsOnData[]

  @@map("data")
}

model TagsOnData {
  dataId String @map("data_id")
  tagId  String @map("tag_id")

  tag  Tags @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  data Data @relation(fields: [dataId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([dataId, tagId])
  @@map("data_tags")
}

model DataType {
  id            String   @id
  name          String
  description   String?
  handlerPlugin String   @map("handler_plugin")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  data Data[]

  @@map("data_types")
}

model Analysis {
  id         String   @id @default(uuid())
  name       String
  type       String
  parameters Json?
  output     Json?
  createdBy  String   @map("created_by")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User  @relation(fields: [createdBy], references: [id], onDelete: Restrict, onUpdate: Cascade)
  jobs Job[]

  @@map("analyses")
}

model Job {
  id         String    @id @default(uuid())
  queueId    String?   @map("queue_id")
  analysisId String    @map("analysis_id")
  status     JobStatus @default(PENDING)
  reasons    String?
  createdBy  String    @map("created_by")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("jobs")
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  message   String
  createdBy String           @map("created_by")
  read      Boolean          @default(false)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("notifications")
}

enum Role {
  USER
  ADMIN
}

enum JobStatus {
  PENDING   @map("pending") // Job has been created but not yet queued
  WAITING   @map("waiting") // Job is queued but not yet running
  RUNNING   @map("running") // Job is currently running
  COMPLETED @map("completed") // Job has completed successfully
  FAILED    @map("failed") // Job has failed
}

enum NotificationType {
  INFO
  WARNING
  ERROR
}
